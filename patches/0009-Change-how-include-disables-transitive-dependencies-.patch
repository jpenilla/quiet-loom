From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jason Penilla <11360596+jpenilla@users.noreply.github.com>
Date: Tue, 28 Feb 2023 12:12:48 -0700
Subject: [PATCH] Change how `include` disables transitive dependencies to
 allow platform dependencies to work


diff --git a/src/main/java/net/fabricmc/loom/configuration/LoomConfigurations.java b/src/main/java/net/fabricmc/loom/configuration/LoomConfigurations.java
index 9d7008f35c13ed5b915a94a46c01f13033c5390b..84bceb3eba4fe8a66cf61f0d0dcd1f54cc14a9ca 100644
--- a/src/main/java/net/fabricmc/loom/configuration/LoomConfigurations.java
+++ b/src/main/java/net/fabricmc/loom/configuration/LoomConfigurations.java
@@ -30,7 +30,9 @@ import org.gradle.api.NamedDomainObjectProvider;
 import org.gradle.api.Project;
 import org.gradle.api.artifacts.Configuration;
 import org.gradle.api.artifacts.ConfigurationContainer;
+import org.gradle.api.artifacts.ModuleDependency;
 import org.gradle.api.artifacts.dsl.DependencyHandler;
+import org.gradle.api.attributes.Category;
 import org.gradle.api.plugins.JavaPlugin;
 
 import net.fabricmc.loom.LoomGradleExtension;
@@ -81,7 +83,16 @@ public abstract class LoomConfigurations implements Runnable {
 		registerNonTransitive(Constants.Configurations.LOADER_DEPENDENCIES, Role.RESOLVABLE);
 
 		registerNonTransitive(Constants.Configurations.MINECRAFT, Role.NONE);
-		registerNonTransitive(Constants.Configurations.INCLUDE, Role.RESOLVABLE);
+		register(Constants.Configurations.INCLUDE, Role.RESOLVABLE).configure(configuration -> configuration.withDependencies(dependencySet -> dependencySet.all(dependency -> {
+			if (!(dependency instanceof ModuleDependency module)) {
+				return;
+			}
+			final Category category = module.getAttributes().getAttribute(Category.CATEGORY_ATTRIBUTE);
+			if (category != null && (category.getName().equals(Category.REGULAR_PLATFORM) || category.getName().equals(Category.ENFORCED_PLATFORM))) {
+				return;
+			}
+			module.setTransitive(false);
+		})));
 		registerNonTransitive(Constants.Configurations.MAPPING_CONSTANTS, Role.RESOLVABLE);
 
 		register(Constants.Configurations.NAMED_ELEMENTS, Role.CONSUMABLE).configure(configuration -> {
