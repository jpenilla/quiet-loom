From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jason Penilla <11360596+jpenilla@users.noreply.github.com>
Date: Sun, 19 Nov 2023 16:31:16 -0700
Subject: [PATCH] Skip output remapping for Mojang-mapped NeoForge projects


diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/forge/FieldMigratedMappingConfiguration.java b/src/main/java/net/fabricmc/loom/configuration/providers/forge/FieldMigratedMappingConfiguration.java
index 1c12be754836e3d3229a8a92a1754d923e0342d6..64ea773dcea7e6fb7e55feee9ce45b0a88a94d73 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/forge/FieldMigratedMappingConfiguration.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/forge/FieldMigratedMappingConfiguration.java
@@ -69,9 +69,15 @@ public final class FieldMigratedMappingConfiguration extends MappingConfiguratio
 	private Path rawTinyMappings;
 	private Path rawTinyMappingsWithSrg;
 	private Path rawTinyMappingsWithMojang;
+	private final boolean mojangMappedProject;
 
-	public FieldMigratedMappingConfiguration(String mappingsIdentifier, Path mappingsWorkingDir) {
+	public FieldMigratedMappingConfiguration(String mappingsIdentifier, Path mappingsWorkingDir, boolean mojangMappedProject) {
 		super(mappingsIdentifier, mappingsWorkingDir);
+		this.mojangMappedProject = mojangMappedProject;
+	}
+
+	public boolean isMojangMappedProject() {
+		return this.mojangMappedProject;
 	}
 
 	@Override
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingsDependency.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingsDependency.java
index e99f45518188f1d3573c4d682794efc400b6548b..7254ea2adb7eb894c7ef8c7b4ef853740856522a 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingsDependency.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingsDependency.java
@@ -49,6 +49,8 @@ import net.fabricmc.loom.api.mappings.layered.MappingContext;
 import net.fabricmc.loom.api.mappings.layered.MappingLayer;
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
 import net.fabricmc.loom.configuration.providers.mappings.extras.unpick.UnpickLayer;
+import net.fabricmc.loom.configuration.providers.mappings.mojmap.MojangMappingsSpec;
+import net.fabricmc.loom.configuration.providers.mappings.parchment.ParchmentMappingsSpec;
 import net.fabricmc.loom.configuration.providers.mappings.utils.AddConstructorMappingVisitor;
 import net.fabricmc.loom.util.ZipUtils;
 import net.fabricmc.mappingio.adapter.MappingDstNsReorder;
@@ -186,4 +188,10 @@ public class LayeredMappingsDependency implements SelfResolvingDependency, FileC
 	public FileCollection getFiles() {
 		return project.files(resolve());
 	}
+
+	public boolean isMojangMappings() {
+		return this.layeredMappingSpec.layers().stream()
+				.skip(1) // see LayeredMappingSpecBuilderImpl
+				.allMatch(spec -> spec instanceof MojangMappingsSpec || spec instanceof ParchmentMappingsSpec);
+	}
 }
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingConfiguration.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingConfiguration.java
index e10db1c5daa9498a8238af8115ce6bb613d988b8..46d4812fe61ac06868a60f48defe05bc1c6c9855 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingConfiguration.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingConfiguration.java
@@ -144,7 +144,15 @@ public class MappingConfiguration {
 		MappingConfiguration mappingConfiguration;
 
 		if (extension.isForgeLike()) {
-			mappingConfiguration = new FieldMigratedMappingConfiguration(mappingsIdentifier, workingDir);
+			final boolean mojmap;
+
+			if (dependency.getDependency() instanceof LayeredMappingsDependency layered) {
+				mojmap = layered.isMojangMappings();
+			} else {
+				mojmap = false;
+			}
+
+			mappingConfiguration = new FieldMigratedMappingConfiguration(mappingsIdentifier, workingDir, mojmap);
 		} else {
 			mappingConfiguration = new MappingConfiguration(mappingsIdentifier, workingDir);
 		}
diff --git a/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java b/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java
index 6caeb92f620fa3354f534857542fad53ffab95be..498b1d25dc684d44bc4fad7d64d2c53b4894eaac 100644
--- a/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java
+++ b/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java
@@ -65,6 +65,7 @@ import org.jetbrains.annotations.ApiStatus;
 import net.fabricmc.loom.LoomGradleExtension;
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
 import net.fabricmc.loom.build.IntermediaryNamespaces;
+import net.fabricmc.loom.configuration.providers.forge.FieldMigratedMappingConfiguration;
 import net.fabricmc.loom.task.service.JarManifestService;
 import net.fabricmc.loom.util.Constants;
 import net.fabricmc.loom.util.ZipReprocessorUtil;
@@ -159,6 +160,15 @@ public abstract class AbstractRemapJarTask extends Jar {
 
 	protected abstract List<String> getClientOnlyEntries(SourceSet sourceSet);
 
+	@ApiStatus.Internal
+	public boolean shouldSkipRemap(LoomGradleExtension extension) {
+		return extension.isNeoForge()
+				&& extension.getMappingConfiguration() instanceof FieldMigratedMappingConfiguration c
+				&& c.isMojangMappedProject()
+				&& MappingsNamespace.of(this.getSourceNamespace().get()) == MappingsNamespace.NAMED
+				&& MappingsNamespace.of(this.getTargetNamespace().get()) == MappingsNamespace.MOJANG;
+	}
+
 	public interface AbstractRemapParams extends WorkParameters {
 		RegularFileProperty getInputFile();
 		RegularFileProperty getOutputFile();
diff --git a/src/main/java/net/fabricmc/loom/task/RemapJarTask.java b/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
index 9ce2716228684fd0008410861b6fd64cc6680ab8..ec726d07e6ded1fd1ae5e489dbad13adb2865770 100644
--- a/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
+++ b/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
@@ -202,6 +202,10 @@ public abstract class RemapJarTask extends AbstractRemapJarTask {
 	public void run() {
 		final LoomGradleExtension extension = LoomGradleExtension.get(getProject());
 
+		if (shouldSkipRemap(extension)) {
+			getSourceNamespace().convention(getTargetNamespace());
+		}
+
 		submitWork(RemapAction.class, params -> {
 			if (getAddNestedDependencies().get()) {
 				params.getNestedJars().from(getNestedJars());
diff --git a/src/main/java/net/fabricmc/loom/task/RemapSourcesJarTask.java b/src/main/java/net/fabricmc/loom/task/RemapSourcesJarTask.java
index f0aa6d89e2cae57535859e4ef48a347b1e268998..8d92d95276bd896da51ffbd885c05f42d17c553a 100644
--- a/src/main/java/net/fabricmc/loom/task/RemapSourcesJarTask.java
+++ b/src/main/java/net/fabricmc/loom/task/RemapSourcesJarTask.java
@@ -40,6 +40,7 @@ import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import net.fabricmc.loom.LoomGradleExtension;
 import net.fabricmc.loom.task.service.SourceRemapperService;
 import net.fabricmc.loom.util.service.BuildSharedServiceManager;
 import net.fabricmc.loom.util.service.UnsafeWorkQueueHelper;
@@ -58,6 +59,12 @@ public abstract class RemapSourcesJarTask extends AbstractRemapJarTask {
 
 	@TaskAction
 	public void run() {
+		final LoomGradleExtension extension = LoomGradleExtension.get(getProject());
+
+		if (shouldSkipRemap(extension)) {
+			getSourceNamespace().convention(getTargetNamespace());
+		}
+
 		submitWork(RemapSourcesAction.class, params -> {
 			if (!params.namespacesMatch()) {
 				params.getSourcesRemapperServiceUuid().set(UnsafeWorkQueueHelper.create(SourceRemapperService.create(serviceManagerProvider.get().get(), this)));
