From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jason Penilla <11360596+jpenilla@users.noreply.github.com>
Date: Wed, 15 Nov 2023 12:57:36 -0700
Subject: [PATCH] Remove jackson

It's pointless to load two different json libraries when gson supports records now

diff --git a/build.gradle b/build.gradle
index 90cf3e716684970fff30bad017160a0f72554884..7adadc55698c220b1e71a5fe14e972c8e916922e 100644
--- a/build.gradle
+++ b/build.gradle
@@ -127,7 +127,7 @@ dependencies {
 	// libraries
 	implementation libs.commons.io
 	implementation libs.gson
-	implementation libs.jackson
+	testImplementation libs.jackson
 	implementation libs.guava
 	implementation libs.bundles.asm
 
diff --git a/src/main/java/net/fabricmc/loom/LoomGradlePlugin.java b/src/main/java/net/fabricmc/loom/LoomGradlePlugin.java
index 35d0fc7ff5faee0044f590a00c0f105f7126c73a..5a824d4009c4fafa758a786a000e21f0225715ae 100644
--- a/src/main/java/net/fabricmc/loom/LoomGradlePlugin.java
+++ b/src/main/java/net/fabricmc/loom/LoomGradlePlugin.java
@@ -30,8 +30,6 @@ import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
 
-import com.fasterxml.jackson.databind.DeserializationFeature;
-import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableMap;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
@@ -56,7 +54,6 @@ import net.fabricmc.loom.util.LibraryLocationLogger;
 
 public class LoomGradlePlugin implements BootstrappedPlugin {
 	public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
-	public static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
 	public static final String LOOM_VERSION = Objects.requireNonNullElse(LoomGradlePlugin.class.getPackage().getImplementationVersion(), "0.0.0+unknown");
 
 	/**
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingsDependency.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingsDependency.java
index 4ce75ef730ff3a5a98eb463af15bb646806ddd9a..7504e1b6e8d3721214aa5f79eae8a197cf7cc9c1 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingsDependency.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingsDependency.java
@@ -50,6 +50,7 @@ import net.fabricmc.loom.api.mappings.layered.MappingLayer;
 import net.fabricmc.loom.api.mappings.layered.MappingsNamespace;
 import net.fabricmc.loom.configuration.providers.mappings.extras.unpick.UnpickLayer;
 import net.fabricmc.loom.configuration.providers.mappings.utils.AddConstructorMappingVisitor;
+import net.fabricmc.loom.util.Constants;
 import net.fabricmc.loom.util.ZipUtils;
 import net.fabricmc.mappingio.adapter.MappingDstNsReorder;
 import net.fabricmc.mappingio.adapter.MappingSourceNsSwitch;
@@ -118,7 +119,7 @@ public class LayeredMappingsDependency implements SelfResolvingDependency, FileC
 			return;
 		}
 
-		byte[] data = LoomGradlePlugin.OBJECT_MAPPER.writeValueAsString(signatureFixes).getBytes(StandardCharsets.UTF_8);
+		byte[] data = LoomGradlePlugin.GSON.toJson(signatureFixes, Constants.TypeTokens.MAP_STRING_STRING.getType()).getBytes(StandardCharsets.UTF_8);
 
 		ZipUtils.add(mappingsFile, "extras/record_signatures.json", data);
 	}
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingConfiguration.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingConfiguration.java
index 2e58c8391662b53de407f24aab7cc8b4974a3c7f..a30a1dc05758c3444eda00740b0af6c32ee99984 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingConfiguration.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingConfiguration.java
@@ -439,8 +439,7 @@ public class MappingConfiguration {
 		}
 
 		try (Reader reader = Files.newBufferedReader(recordSignaturesJsonPath, StandardCharsets.UTF_8)) {
-			//noinspection unchecked
-			signatureFixes = LoomGradlePlugin.OBJECT_MAPPER.readValue(reader, Map.class);
+			signatureFixes = LoomGradlePlugin.GSON.fromJson(reader, Constants.TypeTokens.MAP_STRING_STRING.getType());
 		}
 	}
 
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/extras/signatures/SignatureFixesLayerImpl.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/extras/signatures/SignatureFixesLayerImpl.java
index 4328311b17f82f155158c39ef0026fd5f3a3b02a..bc9c449e2d032d94d5a698689162063a2bd933c7 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/extras/signatures/SignatureFixesLayerImpl.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/extras/signatures/SignatureFixesLayerImpl.java
@@ -31,6 +31,7 @@ import java.util.Map;
 import org.jetbrains.annotations.ApiStatus;
 
 import net.fabricmc.loom.api.mappings.layered.MappingLayer;
+import net.fabricmc.loom.util.Constants;
 import net.fabricmc.loom.util.ZipUtils;
 import net.fabricmc.mappingio.MappingVisitor;
 
@@ -46,8 +47,7 @@ public record SignatureFixesLayerImpl(Path mappingsFile) implements MappingLayer
 	@Override
 	public Map<String, String> getSignatureFixes() {
 		try {
-			//noinspection unchecked
-			return ZipUtils.unpackJackson(mappingsFile(), SIGNATURE_FIXES_PATH, Map.class);
+			return ZipUtils.unpackJackson(mappingsFile(), SIGNATURE_FIXES_PATH, Constants.TypeTokens.MAP_STRING_STRING.getType());
 		} catch (IOException e) {
 			throw new RuntimeException("Failed to extract signature fixes", e);
 		}
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/extras/unpick/UnpickLayer.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/extras/unpick/UnpickLayer.java
index ce53e64bc4e6f73eedb811ef4d94e2b803a7cc32..960b32937c6d8ed8215605857f44cd6f8debbf6f 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/extras/unpick/UnpickLayer.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/extras/unpick/UnpickLayer.java
@@ -46,7 +46,7 @@ public interface UnpickLayer {
 			final Metadata metadata;
 
 			try (Reader reader = Files.newBufferedReader(metadataPath, StandardCharsets.UTF_8)) {
-				metadata = LoomGradlePlugin.OBJECT_MAPPER.readValue(reader, Metadata.class);
+				metadata = LoomGradlePlugin.GSON.fromJson(reader, Metadata.class);
 			}
 
 			return new UnpickData(metadata, definitions);
@@ -54,7 +54,7 @@ public interface UnpickLayer {
 
 		public record Metadata(int version, String unpickGroup, String unpickVersion) {
 			public String asJson() throws IOException {
-				return LoomGradlePlugin.OBJECT_MAPPER.writeValueAsString(this);
+				return LoomGradlePlugin.GSON.toJson(this, Metadata.class);
 			}
 		}
 	}
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/MinecraftMetadataProvider.java b/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/MinecraftMetadataProvider.java
index 396202cea72f59886a5a4228eeb6be3623bcc091..840207f620d1360dde4d34e02d998c1c48c32e17 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/MinecraftMetadataProvider.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/MinecraftMetadataProvider.java
@@ -115,7 +115,7 @@ public final class MinecraftMetadataProvider {
 		}
 
 		final String versionManifest = builder.downloadString(cacheFile);
-		return LoomGradlePlugin.OBJECT_MAPPER.readValue(versionManifest, ManifestVersion.class);
+		return LoomGradlePlugin.GSON.fromJson(versionManifest, ManifestVersion.class);
 	}
 
 	private MinecraftVersionMeta readVersionMeta() throws IOException {
@@ -128,7 +128,7 @@ public final class MinecraftMetadataProvider {
 		}
 
 		final String json = builder.downloadString(options.minecraftMetadataPath());
-		return LoomGradlePlugin.OBJECT_MAPPER.readValue(json, MinecraftVersionMeta.class);
+		return LoomGradlePlugin.GSON.fromJson(json, MinecraftVersionMeta.class);
 	}
 
 	public record Options(String minecraftVersion,
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/assets/AssetIndex.java b/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/assets/AssetIndex.java
index 3dd6a3c5d52694625b95db4446f33fb0aa4af6f5..10f95c0dc2add0471c408e13c644e040dbd709f8 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/assets/AssetIndex.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/assets/AssetIndex.java
@@ -28,10 +28,8 @@ import java.util.Collection;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
-import com.fasterxml.jackson.annotation.JsonProperty;
-
 @SuppressWarnings("unused")
-public record AssetIndex(Map<String, Entry> objects, boolean virtual, @JsonProperty("map_to_resources") boolean mapToResources) {
+public record AssetIndex(Map<String, Entry> objects, boolean virtual, boolean map_to_resources) {
 	public AssetIndex() {
 		this(new LinkedHashMap<>(), false, false);
 	}
diff --git a/src/main/java/net/fabricmc/loom/task/DownloadAssetsTask.java b/src/main/java/net/fabricmc/loom/task/DownloadAssetsTask.java
index b84557f3064151cf5e76e32d74eac0c762a0d2a6..40fa937d85f592c3856afdd00c98560675e49f44 100644
--- a/src/main/java/net/fabricmc/loom/task/DownloadAssetsTask.java
+++ b/src/main/java/net/fabricmc/loom/task/DownloadAssetsTask.java
@@ -123,11 +123,11 @@ public abstract class DownloadAssetsTask extends AbstractLoomTask {
 				.sha1(assetIndex.sha1())
 				.downloadString(indexFile.toPath());
 
-		return LoomGradlePlugin.OBJECT_MAPPER.readValue(json, AssetIndex.class);
+		return LoomGradlePlugin.GSON.fromJson(json, AssetIndex.class);
 	}
 
 	private Path getAssetsPath(AssetIndex.Object object, AssetIndex index) {
-		if (index.mapToResources() || index.virtual()) {
+		if (index.map_to_resources() || index.virtual()) {
 			return new File(getLegacyResourcesDirectory().get().getAsFile(), object.path()).toPath();
 		}
 
diff --git a/src/main/java/net/fabricmc/loom/util/Constants.java b/src/main/java/net/fabricmc/loom/util/Constants.java
index c12510bcf32cda9c0da04c9d287dc10b34c36ad3..207acac050652fb92cf92bfa1b6f1f15ee7d0007 100644
--- a/src/main/java/net/fabricmc/loom/util/Constants.java
+++ b/src/main/java/net/fabricmc/loom/util/Constants.java
@@ -24,6 +24,9 @@
 
 package net.fabricmc.loom.util;
 
+import java.util.Map;
+
+import com.google.gson.reflect.TypeToken;
 import org.objectweb.asm.Opcodes;
 
 public class Constants {
@@ -154,6 +157,10 @@ public class Constants {
 		public static final String ALLOW_MISMATCHED_PLATFORM_VERSION = "loom.allowMismatchedPlatformVersion";
 	}
 
+	public static final class TypeTokens {
+		public static final TypeToken<Map<String, String>> MAP_STRING_STRING = new TypeToken<>() {};
+	}
+
 	public static final class Forge {
 		public static final String UNDETERMINED_MAIN_CLASS = "[Forge] Main class has not been determined yet!";
 		public static final String ACCESS_TRANSFORMER_PATH = "META-INF/accesstransformer.cfg";
diff --git a/src/main/java/net/fabricmc/loom/util/LibraryLocationLogger.java b/src/main/java/net/fabricmc/loom/util/LibraryLocationLogger.java
index 2d27427f98152173af0e5862fb3cc4ffa3d516cb..ce193de42224f233803bcbfeb2934041c2cfd1c8 100644
--- a/src/main/java/net/fabricmc/loom/util/LibraryLocationLogger.java
+++ b/src/main/java/net/fabricmc/loom/util/LibraryLocationLogger.java
@@ -26,7 +26,6 @@ package net.fabricmc.loom.util;
 
 import java.util.List;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.base.Preconditions;
 import com.google.gson.Gson;
 import kotlinx.metadata.jvm.KotlinClassMetadata;
@@ -53,7 +52,6 @@ public final class LibraryLocationLogger {
 			ClassRemapper.class,
 			ClassNode.class,
 			ASMifier.class,
-			ObjectMapper.class,
 			Gson.class,
 			Preconditions.class,
 			FileUtils.class
diff --git a/src/main/java/net/fabricmc/loom/util/ZipUtils.java b/src/main/java/net/fabricmc/loom/util/ZipUtils.java
index 14c5cce57663daa2498de9610260b2dec06ba103..81464b39f6a7d12f30f6c31a6a86becdb4a03f0e 100644
--- a/src/main/java/net/fabricmc/loom/util/ZipUtils.java
+++ b/src/main/java/net/fabricmc/loom/util/ZipUtils.java
@@ -29,6 +29,7 @@ import java.io.DataInputStream;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.UncheckedIOException;
+import java.lang.reflect.Type;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.NoSuchFileException;
@@ -121,9 +122,9 @@ public class ZipUtils {
 		}
 	}
 
-	public static <T> T unpackJackson(Path zip, String path, Class<T> clazz) throws IOException {
+	public static <T> T unpackJackson(Path zip, String path, Type type) throws IOException {
 		final byte[] bytes = unpack(zip, path);
-		return LoomGradlePlugin.OBJECT_MAPPER.readValue(new String(bytes, StandardCharsets.UTF_8), clazz);
+		return LoomGradlePlugin.GSON.fromJson(new String(bytes, StandardCharsets.UTF_8), type);
 	}
 
 	public static void pack(Path from, Path zip) throws IOException {
