From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jason Penilla <11360596+jpenilla@users.noreply.github.com>
Date: Wed, 15 Nov 2023 12:49:27 -0700
Subject: [PATCH] Pass LinkOptions.NOFOLLOW_LINKS for exists checks


diff --git a/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java b/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java
index 057cde42e019d890d7a9289bde235ff0efc35a7b..04b0d618359df5ce125647cef43cb56107974af6 100644
--- a/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java
+++ b/src/main/java/net/fabricmc/loom/configuration/mods/ArtifactMetadata.java
@@ -28,6 +28,7 @@ import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
+import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.util.Locale;
 import java.util.function.Predicate;
@@ -56,7 +57,7 @@ public record ArtifactMetadata(boolean isFabricMod, RemapRequirements remapRequi
 			isFabricMod = FabricModJsonFactory.containsMod(fs);
 			final Path manifestPath = fs.getPath(Constants.Manifest.PATH);
 
-			if (Files.exists(manifestPath)) {
+			if (Files.exists(manifestPath, LinkOption.NOFOLLOW_LINKS)) {
 				final var manifest = new Manifest(new ByteArrayInputStream(Files.readAllBytes(manifestPath)));
 				final Attributes mainAttributes = manifest.getMainAttributes();
 				final String remapValue = mainAttributes.getValue(Constants.Manifest.REMAP_KEY);
@@ -83,7 +84,7 @@ public record ArtifactMetadata(boolean isFabricMod, RemapRequirements remapRequi
 
 			final Path installerPath = fs.getPath(INSTALLER_PATH);
 
-			if (isFabricMod && Files.exists(installerPath)) {
+			if (isFabricMod && Files.exists(installerPath, LinkOption.NOFOLLOW_LINKS)) {
 				final JsonObject jsonObject = LoomGradlePlugin.GSON.fromJson(Files.readString(installerPath, StandardCharsets.UTF_8), JsonObject.class);
 				installerData = new InstallerData(artifact.version(), jsonObject);
 			}
diff --git a/src/main/java/net/fabricmc/loom/util/FileSystemUtil.java b/src/main/java/net/fabricmc/loom/util/FileSystemUtil.java
index 07fe08cf42b681d47a8d92f060efa0ff509b4545..f37f7e58b368ac271473531965f4cacc90d42e2e 100644
--- a/src/main/java/net/fabricmc/loom/util/FileSystemUtil.java
+++ b/src/main/java/net/fabricmc/loom/util/FileSystemUtil.java
@@ -31,6 +31,7 @@ import java.net.URI;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.FileSystem;
 import java.nio.file.Files;
+import java.nio.file.LinkOption;
 import java.nio.file.NoSuchFileException;
 import java.nio.file.Path;
 import java.util.function.Supplier;
@@ -50,7 +51,7 @@ public final class FileSystemUtil {
 		public byte[] readAllBytes(String path) throws IOException {
 			Path fsPath = getPath(path);
 
-			if (Files.exists(fsPath)) {
+			if (Files.exists(fsPath, LinkOption.NOFOLLOW_LINKS)) {
 				return Files.readAllBytes(fsPath);
 			} else {
 				throw new NoSuchFileException(fsPath.toString());
diff --git a/src/main/java/net/fabricmc/loom/util/ZipUtils.java b/src/main/java/net/fabricmc/loom/util/ZipUtils.java
index 714dce833423ee40df3adc80b19a8d4691ddc3c0..19e4c22ebe2e630081ccb1b714e81978488dea9e 100644
--- a/src/main/java/net/fabricmc/loom/util/ZipUtils.java
+++ b/src/main/java/net/fabricmc/loom/util/ZipUtils.java
@@ -31,6 +31,7 @@ import java.io.InputStreamReader;
 import java.io.UncheckedIOException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
+import java.nio.file.LinkOption;
 import java.nio.file.NoSuchFileException;
 import java.nio.file.Path;
 import java.nio.file.StandardCopyOption;
@@ -71,7 +72,7 @@ public class ZipUtils {
 		try (FileSystemUtil.Delegate fs = FileSystemUtil.getJarFileSystem(zip, false)) {
 			Path fsPath = fs.get().getPath(path);
 
-			return Files.exists(fsPath);
+			return Files.exists(fsPath, LinkOption.NOFOLLOW_LINKS);
 		} catch (IOException e) {
 			throw new UncheckedIOException("Failed to check file from zip", e);
 		}
diff --git a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonFactory.java b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonFactory.java
index b672aa6d406bdb71ea20a4155926578e389a83b5..aa8a21a7d030e80bd0c860b5184eceb25d8cfa89 100644
--- a/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonFactory.java
+++ b/src/main/java/net/fabricmc/loom/util/fmj/FabricModJsonFactory.java
@@ -32,6 +32,7 @@ import java.io.Reader;
 import java.io.UncheckedIOException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
+import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.util.Optional;
 
@@ -137,6 +138,6 @@ public final class FabricModJsonFactory {
 	}
 
 	public static boolean containsMod(FileSystemUtil.Delegate fs) {
-		return Files.exists(fs.getPath(FABRIC_MOD_JSON));
+		return Files.exists(fs.getPath(FABRIC_MOD_JSON), LinkOption.NOFOLLOW_LINKS);
 	}
 }
